---
import StarlightPage from "@astrojs/starlight/components/StarlightPage.astro";
import { Aside } from "@astrojs/starlight/components";
import {
  apiLevel,
  type ExtensionManifest
} from "../components/extensions-list/shared";
import Extension from "../components/extensions-list/Extension.astro";

async function fetchCoreExtensions() {
  const coreExtensions: ExtensionManifest[] = [];

  const entries: { name: string }[] = await fetch(
    "https://api.github.com/repos/moonlight-mod/moonlight/contents/packages/core-extensions/src"
  ).then((resp) => resp.json());
  for (const entry of entries) {
    const url = `https://raw.githubusercontent.com/moonlight-mod/moonlight/main/packages/core-extensions/src/${entry.name}/manifest.json`;
    const manifest = await fetch(url).then((resp) => resp.json());
    coreExtensions.push(manifest);
  }

  return coreExtensions;
}

async function fetchOfficialExtensions(): Promise<ExtensionManifest[]> {
  return await fetch(
    "https://moonlight-mod.github.io/extensions-dist/repo.json"
  ).then((res) => res.json());
}

// Dumb hack to get the extensions list to cache when working on this (GitHub API limits *hurt*)
const devCache = ".extensions-list-cache.json";

async function fetchExtensions(): Promise<ExtensionManifest[]> {
  if (import.meta.env.DEV) {
    const fs = await import("node:fs/promises");
    const exists = await fs
      .stat(devCache)
      .then(() => true)
      .catch(() => false);
    if (exists) {
      const str = await fs.readFile(devCache, "utf8");
      return JSON.parse(str);
    }
  }

  const extensions: ExtensionManifest[] = [];

  extensions.push(...(await fetchOfficialExtensions()));
  extensions.push(...(await fetchCoreExtensions()));

  const sorted = extensions
    .filter((ext) => ext.apiLevel === apiLevel)
    .sort((a, b) => {
      const aName = a.meta?.name ?? a.id;
      const bName = b.meta?.name ?? b.id;
      return aName.localeCompare(bName);
    });

  if (import.meta.env.DEV) {
    const fs = await import("node:fs/promises");
    await fs.writeFile(devCache, JSON.stringify(sorted));
  }

  return sorted;
}

const extensions = await fetchExtensions();
---

<StarlightPage
  frontmatter={{
    title: "Extension list",
    description: "List of all built-in moonlight extensions"
  }}
  headings={extensions.map((ext) => {
    return {
      text: ext.meta?.name || ext.id,
      slug: ext.id,
      depth: 2
    };
  })}
>
  <Aside type="caution">
    This list is regenerated manually and may be slightly out of date.
  </Aside>

  {extensions.map((ext) => <Extension {extensions} {ext} />)}
</StarlightPage>

<style>
  .noMargin {
    margin: 0 !important;
  }
</style>
